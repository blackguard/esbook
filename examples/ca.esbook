{
    "nb_type": "esbook",
    "nb_version": "1.0.0",
    "elements": [
        {
            "id": "id-d3b50953-c31b-43e1-b22f-7c1ba9c440a1",
            "input": "const {\n    cellular_automaton: {\n        CellularAutomaton,\n        ECA,\n        CellularAutomatonRenderer,\n    },\n} = await importlib('cmjs.js');\n\nconst { range } = await importlib('iterable-util.js');\n\nconst eca = new ECA(110);\nconst colors = [\n    'white',\n    'black',\n];\nconst renderer = new CellularAutomatonRenderer(eca, colors, {\n    cell_width:        9,\n    cell_height:       9,\n    cell_border_width: 1,\n});\n\nconst initial_row = eca.create_row(1001);\ninitial_row[Math.trunc(initial_row.length/2)] = 1;\n\nconst ctx = output_context.create_canvas_output_element(10000, 4600).getContext('2d');\n\nrenderer.render(ctx, initial_row, 10, 10, 500);",
            "output": []
        },
        {
            "id": "id-64e32135-674d-4543-bc0d-02a0c6c1cfbc",
            "input": "const {\n    cellular_automaton: {\n        CellularAutomaton,\n        ECA,\n        CellularAutomatonRenderer,\n    },\n} = await importlib('cmjs.js');\n\nconst { range } = await importlib('iterable-util.js');\n\nconst cell_value_count = 8;\nconst input_radius     = 2;\n\nconst { input_width } = CellularAutomaton.stats(cell_value_count, input_radius);\n\n// form all numbers with #digits=input_width and radix=cell_value_count:\ntransition_indices = range( range(input_width).map(_ => range(cell_value_count)) );\n\nconst transitions = [];\nconst k = 0.5;\nconst m = 2**(k*cell_value_count);\nfor (const idx of transition_indices) {\n    const w = [ ...idx ];\n    const value = Math.trunc(2**(k*cell_value_count*Math.random())*cell_value_count/m);\n    transitions.push([w, value]);\n}\n\nconst ca = new CellularAutomaton(transitions, cell_value_count, input_radius);\n\nfunction color_by_brightness(brightness) {\n    return `hsl(${0.6 - brightness/2}turn, 100%, ${40 + brightness*40}%)`;\n}\n\nconst colors = new Array(cell_value_count);\nfor (let i = 0; i < cell_value_count; i++) {\n    colors[i] = color_by_brightness(i/cell_value_count);\n}\n\nconst row_radius = 70;\n\nconst cell_width        = 7;\nconst cell_height       = 7;\nconst cell_border_width = 1;\nconst cell_border_color = '#000';\n\nconst renderer = new CellularAutomatonRenderer(ca, colors, {\n    cell_width,\n    cell_height,\n    cell_border_width,\n    cell_border_color,\n});\n\nconst margin_x = 10;\nconst margin_y = 10;\n\nconst initial_row = ca.create_row(2*row_radius + 1);\ninitial_row[Math.trunc(initial_row.length/2)] = 1;\n\nconst width  = initial_row.length*cell_width + 2*margin_x;\nconst height = row_radius*cell_height + 2*margin_y;\n\nconst ctx = output_context.create_canvas_output_element(width, height).getContext('2d')\n\nrenderer.render(ctx, initial_row, margin_x, margin_y, row_radius);\n",
            "output": []
        },
        {
            "id": "id-ce49d393-bccb-451e-a72e-b8bd291ce0f1",
            "input": "",
            "output": []
        }
    ]
}